<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 创建 SqlSessionFactory，同时指定数据源-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 当SqlSessionFactoryBean提供的配置不能满足使用时，你可以使用mybatis-config.xml配置文件配置其他属性，
        然后通过 configLocation 属性指定该配置的路径，SqlSessionFactoryBean会使用该配置文件创建Configuration。 -->
        <property name="configLocation" value="classpath:/mybatis.xml"/>
        <!--指定实体类映射文件，可以指定同时指定某一包以及子包下面的所有配置文件，
        mapperLocations和configLocation有一个即可，当需要为实体类指定别名时，可指定configLocation属性，
        再在mybatis总配置文件中采用mapper引入实体类映射文件 -->
        <property name="mapperLocations">
            <array>
                <value>classpath*:mapper/**/*.xml</value>
            </array>
        </property>
    </bean>

    <!-- 扫描指定包下的 Mapper 类文件, 可以加载到 Spring Bean 容器中,并且 从 sqlSession 种拿到该类的实例 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ytwman.greens.commons"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- myBatis 模板 -->
    <bean class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory"/>
    </bean>

    <!-- Spring 托管事物 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 开启注解事物驱动 -->
    <tx:annotation-driven transaction-manager="txManager"/>

    <!-- 事物代理模板类 -->
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate"
          scope="prototype">
        <property name="transactionManager" ref="txManager"/>
    </bean>

</beans>